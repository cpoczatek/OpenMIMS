/*
 * MimsHSIView.java
 *
 * Created on Aug 3, 2010, 2:46:44 PM
 */
package com.nrims;

import java.awt.Component;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author zkaufman
 */
public class MimsHSIView extends javax.swing.JPanel {

   public static final long serialVersionUID = 1;
    private boolean bUpdating = false;
    private UI ui = null;
    private HSIProps props = new com.nrims.HSIProps();
    private DefaultListModel listModel = new DefaultListModel();
    private MimsPlus currentImage;
    private SpinnerNumberModel ratioMaxSpinnerModel =  new SpinnerNumberModel(1.0, -65535, 65535.0, 1);
    private SpinnerNumberModel ratioMinSpinnerModel =  new SpinnerNumberModel(1.0, -65535, 65535.0, 1);
    //private SpinnerNumberModel percentMaxSpinnerModel =  new SpinnerNumberModel(1, -65535, 65535, 1);
    //private SpinnerNumberModel percentMinSpinnerModel =  new SpinnerNumberModel(1, -65535, 65535, 1);

   /**
     * @param ui UI into which the HSIView will be created.
     */
    public MimsHSIView(UI ui) {
        this.ui = ui;
        initComponents();                                                
        medianRadiusjSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.5d), null, Double.valueOf(0.5d)));
        hsiWindowjSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        ratioSFjSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 99999.0d, 1.0d));
        
        props.setRatioScaleFactor((double)ui.getPreferences().getscaleFactor());
        ratioSFjSpinner.setValue(props.getRatioScaleFactor());
        rartioMaxjSpinner.setModel(ratioMaxSpinnerModel);
        ratioMinjSpinner.setModel(ratioMinSpinnerModel);
        numThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        denThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        jList1.setModel(listModel);
        jList1.setCellRenderer(new MyCellRenderer(this.ui));
        ratioRadioButton.setSelected(ui.getIsRatio());

        updateImage();    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      jPanel1 = new javax.swing.JPanel();
      displayHSIjButton = new javax.swing.JButton();
      medianFilterjButton = new javax.swing.JRadioButton();
      medianRadiusjSpinner = new javax.swing.JSpinner();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();
      displayRatiojButton = new javax.swing.JButton();
      addRatiojButton = new javax.swing.JButton();
      removeRatiojButton = new javax.swing.JButton();
      hsiSumRadioButton = new javax.swing.JRadioButton();
      hsiWindowRadioButton = new javax.swing.JRadioButton();
      hsiWindowjSpinner = new javax.swing.JSpinner();
      jLabel6 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      numThresholdjSpinner = new javax.swing.JSpinner();
      jLabel4 = new javax.swing.JLabel();
      rartioMaxjSpinner = new javax.swing.JSpinner();
      jLabel5 = new javax.swing.JLabel();
      jLabel8 = new javax.swing.JLabel();
      denThresholdjSpinner = new javax.swing.JSpinner();
      ratioMinjSpinner = new javax.swing.JSpinner();
      jButton2 = new javax.swing.JButton();
      ratioSFjSpinner = new javax.swing.JSpinner();
      jLabel12 = new javax.swing.JLabel();
      transparencyjComboBox = new javax.swing.JComboBox();
      jLabel13 = new javax.swing.JLabel();
      scalebarjComboBox = new javax.swing.JComboBox();
      imagejLabel = new javax.swing.JLabel();
      rgbMaxjLabel = new javax.swing.JLabel();
      rgbMinjLabel = new javax.swing.JLabel();
      rgbMaxjSlider = new javax.swing.JSlider();
      rgbMinjSlider = new javax.swing.JSlider();
      percentTurnoverRadioButton = new javax.swing.JRadioButton();
      ratioRadioButton = new javax.swing.JRadioButton();

      setPreferredSize(new java.awt.Dimension(969, 431));

      displayHSIjButton.setText("Display HSI");
      displayHSIjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayHSIjButtonActionPerformed(evt);
         }
      });

      medianFilterjButton.setText("Median Filter Ratio   Radius:");
      medianFilterjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            medianFilterjButtonActionPerformed(evt);
         }
      });

      medianRadiusjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            medianRadiusjSpinnerStateChanged(evt);
         }
      });

      jScrollPane1.setViewportView(jList1);

      displayRatiojButton.setText("Display Ratio");
      displayRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayRatiojButtonActionPerformed(evt);
         }
      });

      addRatiojButton.setText("Add...");
      addRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addRatiojButtonActionPerformed(evt);
         }
      });

      removeRatiojButton.setText("Remove");
      removeRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeRatiojButtonActionPerformed(evt);
         }
      });

      hsiSumRadioButton.setText("Use Sum");
      hsiSumRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiSumRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowRadioButton.setText("Use Window +/- ");
      hsiWindowRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiWindowRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowjSpinner.setEnabled(false);
      hsiWindowjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            hsiWindowjSpinnerStateChanged(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(removeRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(addRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(displayRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(displayHSIjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(hsiWindowRadioButton)
                  .addGap(18, 18, 18)
                  .addComponent(hsiWindowjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(hsiSumRadioButton)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(medianFilterjButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(medianRadiusjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(73, 73, 73))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(hsiSumRadioButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(hsiWindowjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(hsiWindowRadioButton))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(medianFilterjButton)
                     .addComponent(medianRadiusjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(displayRatiojButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(displayHSIjButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(addRatiojButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(removeRatiojButton)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jLabel6.setText("Threshold:");

      jLabel3.setText("Ratio Range:");

      jLabel7.setText("Num");

      numThresholdjSpinner.setToolTipText("Min Numerator value");
      numThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            numThresholdjSpinnerStateChanged(evt);
         }
      });

      jLabel4.setText("Max");

      rartioMaxjSpinner.setToolTipText("Max Ratio in HSI");
      rartioMaxjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rartioMaxjSpinnerStateChanged(evt);
         }
      });

      jLabel5.setText("Min");

      jLabel8.setText("Den");

      denThresholdjSpinner.setToolTipText("Min Denominator value");
      denThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            denThresholdjSpinnerStateChanged(evt);
         }
      });

      ratioMinjSpinner.setToolTipText("Min Ratio in HSI");
      ratioMinjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            ratioMinjSpinnerStateChanged(evt);
         }
      });

      jButton2.setText("Auto");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
         }
      });

      ratioSFjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            ratioSFjSpinnerStateChanged(evt);
         }
      });

      jLabel12.setText("Transparency");

      transparencyjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Max Num,Den", "Numerator", "Denominator", "Min Num,Den", "Mean Num,Den", "Sum Num,Den", "RMS Num,Den" }));
      transparencyjComboBox.setToolTipText("Intensity component of HSI");
      transparencyjComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            transparencyjComboBoxActionPerformed(evt);
         }
      });

      jLabel13.setText("Label");

      scalebarjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Off", "Scale", "Scale+Labels" }));
      scalebarjComboBox.setToolTipText("Show Scale and Labels");
      scalebarjComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            scalebarjComboBoxActionPerformed(evt);
         }
      });

      imagejLabel.setText("Image: ");

      rgbMaxjLabel.setText("RGB Max: 255");
      rgbMaxjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      rgbMinjLabel.setText("RGB Min: 0");
      rgbMinjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      rgbMaxjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMaxjSlider.setMajorTickSpacing(50);
      rgbMaxjSlider.setMaximum(255);
      rgbMaxjSlider.setPaintLabels(true);
      rgbMaxjSlider.setPaintTicks(true);
      rgbMaxjSlider.setValue(255);
      rgbMaxjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMaxjSliderStateChanged(evt);
         }
      });

      rgbMinjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMinjSlider.setMajorTickSpacing(50);
      rgbMinjSlider.setMaximum(255);
      rgbMinjSlider.setPaintLabels(true);
      rgbMinjSlider.setPaintTicks(true);
      rgbMinjSlider.setValue(0);
      rgbMinjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMinjSliderStateChanged(evt);
         }
      });

      percentTurnoverRadioButton.setText("Percent Turnover");
      percentTurnoverRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            percentTurnoverRadioButtonActionPerformed(evt);
         }
      });

      ratioRadioButton.setSelected(true);
      ratioRadioButton.setText("Ratio   (scale Factor)");
      ratioRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ratioRadioButtonActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(percentTurnoverRadioButton)
                  .addContainerGap())
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(rgbMaxjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(rgbMinjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(jLabel12)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(transparencyjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jLabel13)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(scalebarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3))
                                 .addGap(18, 18, 18)
                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rartioMaxjSpinner)
                                    .addComponent(numThresholdjSpinner))
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)))
                              .addGroup(layout.createSequentialGroup()
                                 .addComponent(ratioRadioButton)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                 .addComponent(ratioSFjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ratioMinjSpinner)
                                    .addComponent(denThresholdjSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                 .addComponent(jButton2))
                              .addComponent(imagejLabel))))
                     .addContainerGap(550, Short.MAX_VALUE))
                  .addGroup(layout.createSequentialGroup()
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(rgbMaxjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rgbMinjLabel, 0, 0, Short.MAX_VALUE))
                     .addGap(857, 857, 857)))))
         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(272, Short.MAX_VALUE)))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap(166, Short.MAX_VALUE)
            .addComponent(percentTurnoverRadioButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(33, 33, 33)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(jLabel6)
                              .addComponent(jLabel7)
                              .addComponent(numThresholdjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel8)
                              .addComponent(denThresholdjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(layout.createSequentialGroup()
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                 .addComponent(jLabel3)
                                 .addComponent(jLabel4)
                                 .addComponent(rartioMaxjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                 .addComponent(jLabel5)
                                 .addComponent(ratioMinjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGap(26, 26, 26)))
                        .addGap(18, 18, 18))
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(31, 31, 31)))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(rgbMaxjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(rgbMinjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(rgbMaxjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rgbMinjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(11, 11, 11)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel12)
                     .addComponent(transparencyjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel13)
                     .addComponent(scalebarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(36, 36, 36))
               .addGroup(layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(ratioRadioButton)
                     .addComponent(ratioSFjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(imagejLabel))
                  .addContainerGap(221, Short.MAX_VALUE))))
         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(264, Short.MAX_VALUE)))
      );
   }// </editor-fold>//GEN-END:initComponents



    private void displayHSIjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHSIjButtonActionPerformed
       if (bUpdating)
          return;

       // Get the selected ratio images. Each element
       // should have the form 2:1 or 4:3 etc.
       Object[] idx = jList1.getSelectedValues();
       MimsPlus mp;

       // Generate images
       for (int i = 0; i < idx.length; i++) {
          String label = (String) idx[i];
          int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
          int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();

          int ri = ui.getHsiImageIndex(numerator, denomator);
          if (ri > -1) {
             MimsPlus[] mps = ui.getOpenHSIImages();
             mp = mps[ri];
             mp.getWindow().toFront();
          } else {
             HSIProps hsiProps = new HSIProps(numerator, denomator);
             hsiProps.setRatioScaleFactor((Double)ratioSFjSpinner.getValue());
             mp = new MimsPlus(ui, hsiProps);
             mp.showWindow();
          }
       }
    }//GEN-LAST:event_displayHSIjButtonActionPerformed

    private void rartioMaxjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rartioMaxjSpinnerStateChanged
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        

        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           props.setMaxRatio(new Double(rartioMaxjSpinner.getValue().toString()));
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           currentImage.setDisplayRange(new Double(ratioMinjSpinner.getValue().toString()), new Double(rartioMaxjSpinner.getValue().toString()));
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_rartioMaxjSpinnerStateChanged

    private void ratioMinjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ratioMinjSpinnerStateChanged
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;
        
        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           props.setMinRatio(new Double(ratioMinjSpinner.getValue().toString()));
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           currentImage.setDisplayRange(new Double(ratioMinjSpinner.getValue().toString()), new Double(rartioMaxjSpinner.getValue().toString()));
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_ratioMinjSpinnerStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType()!=MimsPlus.HSI_IMAGE)
           return;

        MimsPlus mp = currentImage;

        ui.autoContrastImage(mp);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void numThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numThresholdjSpinnerStateChanged
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE){
           props.setMinNum(new Integer(numThresholdjSpinner.getValue().toString()));
           currentImage.computeHSI();
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           int numThreshold = ((Integer)numThresholdjSpinner.getValue()).intValue();
           currentImage.getRatioProps().setNumThreshold(numThreshold);
           currentImage.computeRatio();
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_numThresholdjSpinnerStateChanged

    private void denThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_denThresholdjSpinnerStateChanged
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           props.setMinDen(new Integer(denThresholdjSpinner.getValue().toString()));
           currentImage.computeHSI();
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           int denThreshold = ((Integer)denThresholdjSpinner.getValue()).intValue();
           currentImage.getRatioProps().setDenThreshold(denThreshold);
           currentImage.computeRatio();
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_denThresholdjSpinnerStateChanged

    private void transparencyjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyjComboBoxActionPerformed
       if (bUpdating || (currentImage.getMimsType()!=currentImage.HSI_IMAGE))
            return;

        props.setTransparency(transparencyjComboBox.getSelectedIndex());
        update();
    }//GEN-LAST:event_transparencyjComboBoxActionPerformed

    private void scalebarjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scalebarjComboBoxActionPerformed
       // currentImage is only set when an HSI is generated/selected
   if (bUpdating || currentImage == null)
      return;

   if (currentImage.getMimsType() != MimsPlus.HSI_IMAGE)
      return;

   // Make sure we have valid props object.
   if (props == null) return;

   // Get the HSI image to be changed.
   int i = ui.getHSIImageIndex(props);
   if (i<0 || i>=ui.maxMasses) return;
   MimsPlus mp = ui.getHSIImage(i);
   if (mp == null) return;

   // Adjust HSIProps.
   props = mp.getHSIProps();
   props.setLabelMethod(scalebarjComboBox.getSelectedIndex());

   // Regenerate Image.
   mp.setupHSIImage(props);
    }//GEN-LAST:event_scalebarjComboBoxActionPerformed

    private void rgbMaxjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMaxjSliderStateChanged
       if (props == null)
           return;

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType()!=MimsPlus.HSI_IMAGE)
           return;

        int val = rgbMaxjSlider.getValue();

        props.setMaxRGB(val);
        rgbMaxjLabel.setText("RGB Max: " + val);

        //change min slider limits in response
        int range = (rgbMinjSlider.getMaximum() - rgbMinjSlider.getMinimum());
        int spacing = java.lang.Math.round(range/5)+1;
        rgbMinjSlider.setMaximum(val-1);
        rgbMinjSlider.setMajorTickSpacing(spacing);
        rgbMinjSlider.setLabelTable(rgbMinjSlider.createStandardLabels(spacing));
        rgbMinjSlider.repaint();
        //needs to be called to update image
        update();
    }//GEN-LAST:event_rgbMaxjSliderStateChanged

    private void medianFilterjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterjButtonActionPerformed
       if (this.bUpdating) return;

        // Get button and spinner values.
        boolean med = medianFilterjButton.isSelected();
        double r = new Double(medianRadiusjSpinner.getValue().toString());

        // Set values in ui.
        ui.setMedianFilterRatios(med);
        ui.setMedianFilterRadius(r);

        // Recompute all ratio images.
        ui.recomputeAllRatio();

        // Recompute all hsi images.
        ui.recomputeAllHSI();
    }//GEN-LAST:event_medianFilterjButtonActionPerformed

    private void medianRadiusjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_medianRadiusjSpinnerStateChanged
       if (this.bUpdating) return;
        if (!medianFilterjButton.isSelected()) return;

        // Get radius value.
        double r = new Double(medianRadiusjSpinner.getValue().toString());

        // Set local props object and ui field.
        ui.setMedianFilterRadius(r);

        // Recompute all ratio images.
        ui.recomputeAllRatio();

        // Recompute all hsi images.
        ui.recomputeAllHSI();
    }//GEN-LAST:event_medianRadiusjSpinnerStateChanged

    private void rgbMinjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMinjSliderStateChanged
       if (bUpdating || (currentImage.getMimsType()!=currentImage.HSI_IMAGE)) {
        return;
    }
    final int val = rgbMinjSlider.getValue();

    props.setMinRGB(val);
    rgbMinjLabel.setText("RGB Min: " + val);

    //change max slider limits in response
    int range = (rgbMaxjSlider.getMaximum() - rgbMaxjSlider.getMinimum());
    int spacing = java.lang.Math.round(range / 5) + 1;
    rgbMaxjSlider.setMinimum(val + 1);
    rgbMaxjSlider.setMajorTickSpacing(spacing);
    rgbMaxjSlider.setLabelTable(rgbMaxjSlider.createStandardLabels(spacing));
    rgbMaxjSlider.repaint();
    //needs to be called to update image
    update();
    }//GEN-LAST:event_rgbMinjSliderStateChanged

    private void displayRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRatiojButtonActionPerformed
       if (bUpdating)
      return;

   // Get the selected ratio images. Each element
   // should have the form 2:1 or 4:3 etc.
   Object[] idx = jList1.getSelectedValues();
   MimsPlus mp;

   // Generate images
    for (int i = 0; i < idx.length; i++) {
        String label = (String) idx[i];
        int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
        int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();

        int ri = ui.getRatioImageIndex(numerator, denomator);
        if (ri > -1) {
           MimsPlus[] mps = ui.getOpenRatioImages();
           mp = mps[ri];
           mp.getWindow().toFront();
        } else {
           RatioProps ratioProps = new RatioProps(numerator, denomator);
           ratioProps.setRatioScaleFactor((Double)ratioSFjSpinner.getValue());
           mp = new MimsPlus(ui, ratioProps);
           mp.showWindow();
        }
    }
    }//GEN-LAST:event_displayRatiojButtonActionPerformed

    private void addRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRatiojButtonActionPerformed
        MimsRatioManager ratioManager = MimsRatioManager.getInstance();
        if (ratioManager == null) {
            ratioManager = new MimsRatioManager(this, ui);
        }
        ratioManager.showFrame();
    }//GEN-LAST:event_addRatiojButtonActionPerformed

    private void removeRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRatiojButtonActionPerformed
       int index[] = jList1.getSelectedIndices();
      for (int i = index.length-1; i >= 0; i--){
         listModel.removeElementAt(index[i]);
      }
    }//GEN-LAST:event_removeRatiojButtonActionPerformed

    private void hsiSumRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiSumRadioButtonActionPerformed
       if(this.bUpdating) return;

    // Update GUI
    hsiWindowRadioButton.setSelected(false);
    hsiWindowjSpinner.setEnabled(false);

    // Set isSum in ui.
    ui.setIsSum(hsiSumRadioButton.isSelected());
    ui.setIsWindow(false);

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    ui.recomputeAllHSI();
    }//GEN-LAST:event_hsiSumRadioButtonActionPerformed

    private void hsiWindowRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiWindowRadioButtonActionPerformed
       if(this.bUpdating) return;

    // Update GUI.
    if (hsiWindowRadioButton.isSelected()) hsiWindowjSpinner.setEnabled(true);
    else hsiWindowjSpinner.setEnabled(false);
    hsiSumRadioButton.setSelected(false);

    // Set isWindow in ui.
    ui.setIsWindow(hsiWindowRadioButton.isSelected());
    ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));
    ui.setIsSum(false);

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    ui.recomputeAllHSI();
    }//GEN-LAST:event_hsiWindowRadioButtonActionPerformed

    private void hsiWindowjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hsiWindowjSpinnerStateChanged
       if(this.bUpdating) return;

    // Update window range in UI.
    ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));

    // Recompute all ratio images.
    ui.recomputeAllRatio();

    // Recompute all hsi images.
    ui.recomputeAllHSI();
    }//GEN-LAST:event_hsiWindowjSpinnerStateChanged

    private void ratioSFjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ratioSFjSpinnerStateChanged
       if (bUpdating)
        return;

    MimsPlus mp = currentImage;
    if(mp==null) { return; }

    if (mp.getMimsType() == MimsPlus.HSI_IMAGE) {
        props.setRatioScaleFactor((Double) ratioSFjSpinner.getValue());
        mp.getHSIProcessor().getHSIProps().setRatioScaleFactor(props.getRatioScaleFactor());
        mp.computeHSI();

    } else if (mp.getMimsType() == MimsPlus.RATIO_IMAGE) {
        mp.getRatioProps().setRatioScaleFactor((Double) ratioSFjSpinner.getValue());
        mp.computeRatio();
        mp.updateAndDraw();
    }
    }//GEN-LAST:event_ratioSFjSpinnerStateChanged

    private void percentTurnoverRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentTurnoverRadioButtonActionPerformed

       if (ui.getIsPercentTurnover()) {
          percentTurnoverRadioButton.setSelected(true);
          return;
       }

       // Take care of button group and labels.
       percentTurnoverRadioButton.setSelected(true);
       ratioRadioButton.setSelected(false);
       ratioSFjSpinner.setEnabled(false);
       jLabel3.setText("% Turnover:");
       ui.setIsPercentTurnover(percentTurnoverRadioButton.isSelected());
       ui.setIsRatio(false);

       // Recompute all hsi images.
       MimsPlus[] mps = ui.getOpenHSIImages();
       for (int i = 0; i < mps.length; i++) {
          float maxRatioVal = (float)mps[i].getHSIProps().getMaxRatio();
          float minRatioVal = (float)mps[i].getHSIProps().getMinRatio();
          float sf = (float)mps[i].getHSIProps().getRatioScaleFactor();
          float maxPercentVal = HSIProcessor.turnoverTransform(maxRatioVal, HSIProcessor.REFERENCE, HSIProcessor.BACKGROUND, sf);
          float minPercentVal = HSIProcessor.turnoverTransform(minRatioVal, HSIProcessor.REFERENCE, HSIProcessor.BACKGROUND, sf);
          HSIProps hsiprops = mps[i].getHSIProps();
          hsiprops.setMaxRatio(maxPercentVal);
          hsiprops.setMinRatio(minPercentVal);
          mps[i].getHSIProcessor().setProps(hsiprops);
          mps[i].computeHSI();
       }

       setProps(currentImage.getHSIProps());
}//GEN-LAST:event_percentTurnoverRadioButtonActionPerformed

    private void ratioRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioRadioButtonActionPerformed

       if (ui.getIsRatio()) {
          ratioRadioButton.setSelected(true);
          return;
       }
          
       // Take care of button group and labels.
       percentTurnoverRadioButton.setSelected(false);
       ratioRadioButton.setSelected(true);
       ratioSFjSpinner.setEnabled(true);
       jLabel3.setText("Ratio Range:");
       ui.setIsPercentTurnover(percentTurnoverRadioButton.isSelected());
       ui.setIsRatio(true);

       // Recompute all hsi images.
       MimsPlus[] mps = ui.getOpenHSIImages();
       for (int i = 0; i < mps.length; i++) {
          float maxPercentVal = (float)mps[i].getHSIProps().getMaxRatio();
          float minPercentVal = (float)mps[i].getHSIProps().getMinRatio();
          float sf = (float)mps[i].getHSIProps().getRatioScaleFactor();
          float maxRatioVal = HSIProcessor.ratioTransform(maxPercentVal, HSIProcessor.REFERENCE, HSIProcessor.BACKGROUND, sf);
          float minRatioVal = HSIProcessor.ratioTransform(minPercentVal, HSIProcessor.REFERENCE, HSIProcessor.BACKGROUND, sf);
          HSIProps hsiprops = mps[i].getHSIProps();
          hsiprops.setMaxRatio(maxRatioVal);
          hsiprops.setMinRatio(minRatioVal);
          mps[i].getHSIProcessor().setProps(hsiprops);
          mps[i].computeHSI();
       }

       setProps(currentImage.getHSIProps());
    }//GEN-LAST:event_ratioRadioButtonActionPerformed

public double getMedianRadius() {
    return new Double(this.medianRadiusjSpinner.getValue().toString());
}

public synchronized void update() {

   // Make sure we have valid props object.
   if (props == null)
      return;

   MimsPlus mp = currentImage;
   if(mp.getMimsType()!=mp.HSI_IMAGE)
      return;

   // Adjust processor
   mp.getHSIProcessor().setProps(props);
}

    public void updateImage() {
        if(ui == null)
            return;

        com.nrims.data.Opener image = ui.getOpener() ;
        if(image == null)
            return;

        bUpdating = true ;

        // Get the current list of ratio images.
        Object[] current_list = listModel.toArray();

        // Clear the list.
        listModel.removeAllElements();

        // Get all the mass names.
        String [] massNames = image.getMassNames();

        // Maximum difference between atomic weight
        // to appear by defualt on the ratio list.
        double maxDiff = ui.getPreferences().getRatioSpan();
        boolean reciprocals = ui.getPreferences().getRatioReciprocals();

        // Populate the list.
        for(int i=massNames.length-1; i >= 1; i--) {
           Double d1 = new Double(massNames[i]);
           for(int j=i-1; j >= 0; j--) {
              Double d2 = new Double(massNames[j]);
              if (Math.abs(d2-d1) <= maxDiff) {
                 listModel.addElement(i+":"+j);
                 if(reciprocals) {
                     listModel.addElement(j+":"+i);
                 }
              }
           }
        }

        // Add any ratios that existed in the old list
        for (int k = 0; k < current_list.length; k++){
           String[] num_den = ((String)current_list[k]).split(":");
           int num = new Integer(num_den[0]).intValue();
           int den = new Integer(num_den[1]).intValue();
           Object element = new String(num+":"+den);
           if (num < massNames.length && den < massNames.length && !listModel.contains(element))
              listModel.addElement(element);
        }

        // Clear selection by default
        jList1.clearSelection();

        bUpdating = false;
    }

    public boolean displayHSI() {
       MimsPlus mp =  new MimsPlus(ui, props);
       mp.showWindow();
       return true;
    }

    public JList getRatioList() {
       return jList1;
    }

    public void addToRatioList(int a, int b){
       listModel.addElement(a+":"+b);
    }

    public void setProps(HSIProps props) {
        bUpdating = true ;

         this.props = props;
         percentTurnoverRadioButton.setEnabled(true);
         if (ui.getIsPercentTurnover())
            percentTurnoverRadioButton.setSelected(true);
         else
            percentTurnoverRadioButton.setSelected(false);

         if (ui.getIsRatio())
            ratioRadioButton.setSelected(true);
         else
            ratioRadioButton.setSelected(false);
         
         rartioMaxjSpinner.setValue(props.getMaxRatio());
         ratioMinjSpinner.setValue(props.getMinRatio());
         numThresholdjSpinner.setValue(props.getMinNum());
         denThresholdjSpinner.setValue(props.getMinDen());
         rgbMaxjSlider.setValue(props.getMaxRGB());
         rgbMinjSlider.setValue(props.getMinRGB());
         transparencyjComboBox.setSelectedIndex(props.getTransparency());
         scalebarjComboBox.setSelectedIndex(props.getLabelMethod());
         ratioSFjSpinner.setValue(props.getRatioScaleFactor());

        bUpdating = false ;
    }

    public void setProps(RatioProps props) {
        bUpdating = true ;

        percentTurnoverRadioButton.setSelected(false);
        percentTurnoverRadioButton.setEnabled(false);
        ratioRadioButton.setSelected(true);
        ratioSFjSpinner.setEnabled(true);

        jLabel3.setText("Ratio Range:");
        numThresholdjSpinner.setValue(props.getNumThreshold());
        denThresholdjSpinner.setValue(props.getDenThreshold());
        ratioSFjSpinner.setValue(props.getRatioScaleFactor());
        rartioMaxjSpinner.setValue((int)currentImage.getDisplayRangeMax());
        ratioMinjSpinner.setValue((int)currentImage.getDisplayRangeMin());

        bUpdating = false ;
    }

    public void setImageLabel(String s) {
        imagejLabel.setText("Image: " + s);
    }

    public void setCurrentImage(MimsPlus mp) {
        this.currentImage = mp;
        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE){
           rgbMaxjSlider.setEnabled(true);
           rgbMinjSlider.setEnabled(true);
           transparencyjComboBox.setEnabled(true);
           scalebarjComboBox.setEnabled(true);
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           rgbMaxjSlider.setEnabled(false);
           rgbMinjSlider.setEnabled(false);
           transparencyjComboBox.setEnabled(false);
           scalebarjComboBox.setEnabled(false);
        }

    }
    public boolean isMedianFilterSelected() {
        return medianFilterjButton.isSelected();
    }

    public void setIsSum(boolean bool){
        bUpdating = true ;
        hsiSumRadioButton.setSelected(bool);
        bUpdating = false;
    }

    public void setIsWindow(boolean bool) {
        bUpdating = true ;
        hsiWindowRadioButton.setSelected(bool);
        bUpdating = false;
    }

    public void setWindowRange(int r) {
        bUpdating = true ;
        hsiWindowjSpinner.getModel().setValue(r);
        bUpdating = false;
    }

    public void setIsMedianFiltered(boolean bool) {
        bUpdating = true ;
        medianFilterjButton.setSelected(bool);
        bUpdating = false;
    }

    public void setMedianFilterRadius(double r) {
        bUpdating = true ;
        medianRadiusjSpinner.getModel().setValue(r);
        bUpdating = false;
    }


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addRatiojButton;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.JSpinner denThresholdjSpinner;
   private javax.swing.JButton displayHSIjButton;
   private javax.swing.JButton displayRatiojButton;
   private javax.swing.JRadioButton hsiSumRadioButton;
   private javax.swing.JRadioButton hsiWindowRadioButton;
   private javax.swing.JSpinner hsiWindowjSpinner;
   private javax.swing.JLabel imagejLabel;
   private javax.swing.JButton jButton2;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JList jList1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JRadioButton medianFilterjButton;
   private javax.swing.JSpinner medianRadiusjSpinner;
   private javax.swing.JSpinner numThresholdjSpinner;
   private javax.swing.JRadioButton percentTurnoverRadioButton;
   private javax.swing.JSpinner rartioMaxjSpinner;
   private javax.swing.JSpinner ratioMinjSpinner;
   private javax.swing.JRadioButton ratioRadioButton;
   private javax.swing.JSpinner ratioSFjSpinner;
   private javax.swing.JButton removeRatiojButton;
   private javax.swing.JLabel rgbMaxjLabel;
   private javax.swing.JSlider rgbMaxjSlider;
   private javax.swing.JLabel rgbMinjLabel;
   private javax.swing.JSlider rgbMinjSlider;
   private javax.swing.JComboBox scalebarjComboBox;
   private javax.swing.JComboBox transparencyjComboBox;
   // End of variables declaration//GEN-END:variables

   class MyCellRenderer extends JLabel implements ListCellRenderer {
    UI ui;
     public MyCellRenderer(UI ui) {
        this.ui = ui;
        setOpaque(true);
     }
     public Component getListCellRendererComponent(JList list, Object value, int index,
                                                    boolean isSelected, boolean cellHasFocus) {

        // value should be in the form 2:1 or 1:0
        String[] num_den = ((String)value).split(":");
        int num = new Integer(num_den[0]).intValue();
        int den = new Integer(num_den[1]).intValue();

        // convert to the form 'Mass 13.01 / Mass 12.99'
        String[] massNames = ui.getOpener().getMassNames();
        String label = " Mass "+massNames[num]+" / Mass "+massNames[den]+" ";

        // set text
        setText(label);

        // set color
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        return this;
     }
 }
}
