package com.nrims;

import ij.IJ;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import javax.swing.*;

/**
 * The MimsHSIView class creates the "Process" tab on the main
 * UI window. It contains all the functionality for generating
 * and displaying HSI and ratio images. Sliding windows as
 * well as a mendian filter can be applied via this class.
 *
 * @author zkaufman
 */
public class MimsHSIView extends javax.swing.JPanel {

   public static final long serialVersionUID = 1;
    private boolean bUpdating = false;
    private UI ui = null;
    private DefaultListModel listModel = new DefaultListModel();
    private MimsPlus currentImage;

   /**
    * The MimsHSIView constructor.
    * @param ui UI into which the HSIView will be created.
    */
    public MimsHSIView(UI ui) {
        this.ui = ui;
        initComponents();
        initComponentsCustom();
        updateImage();    
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      jPanel1 = new javax.swing.JPanel();
      displayHSIjButton = new javax.swing.JButton();
      medianFilterjButton = new javax.swing.JRadioButton();
      medianRadiusjSpinner = new javax.swing.JSpinner();
      jScrollPane1 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();
      displayRatiojButton = new javax.swing.JButton();
      addRatiojButton = new javax.swing.JButton();
      removeRatiojButton = new javax.swing.JButton();
      hsiSumRadioButton = new javax.swing.JRadioButton();
      hsiWindowRadioButton = new javax.swing.JRadioButton();
      hsiWindowjSpinner = new javax.swing.JSpinner();
      jPanel3 = new javax.swing.JPanel();
      ratioRadioButton = new javax.swing.JRadioButton();
      percentTurnoverRadioButton = new javax.swing.JRadioButton();
      jLabel7 = new javax.swing.JLabel();
      rartioMaxjSpinner = new javax.swing.JSpinner();
      jLabel3 = new javax.swing.JLabel();
      denThresholdjSpinner = new javax.swing.JSpinner();
      imagejLabel = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      ratioSFjSpinner = new javax.swing.JSpinner();
      ratioMinjSpinner = new javax.swing.JSpinner();
      jLabel8 = new javax.swing.JLabel();
      numThresholdjSpinner = new javax.swing.JSpinner();
      jPanel2 = new javax.swing.JPanel();
      rgbMaxjLabel = new javax.swing.JLabel();
      transparencyjComboBox = new javax.swing.JComboBox();
      jLabel12 = new javax.swing.JLabel();
      rgbMinjSlider = new javax.swing.JSlider();
      jLabel13 = new javax.swing.JLabel();
      rgbMinjLabel = new javax.swing.JLabel();
      scalebarjComboBox = new javax.swing.JComboBox();
      rgbMaxjSlider = new javax.swing.JSlider();

      setPreferredSize(new java.awt.Dimension(650, 431));

      displayHSIjButton.setText("Display HSI");
      displayHSIjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayHSIjButtonActionPerformed(evt);
         }
      });

      medianFilterjButton.setText("Median Filter Ratio   Radius:");
      medianFilterjButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            medianFilterjButtonActionPerformed(evt);
         }
      });

      medianRadiusjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            medianRadiusjSpinnerStateChanged(evt);
         }
      });

      jScrollPane1.setViewportView(jList1);

      displayRatiojButton.setText("Display Ratio");
      displayRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            displayRatiojButtonActionPerformed(evt);
         }
      });

      addRatiojButton.setText("Add...");
      addRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addRatiojButtonActionPerformed(evt);
         }
      });

      removeRatiojButton.setText("Remove");
      removeRatiojButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeRatiojButtonActionPerformed(evt);
         }
      });

      hsiSumRadioButton.setText("Use Sum");
      hsiSumRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiSumRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowRadioButton.setText("Use Window +/- ");
      hsiWindowRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            hsiWindowRadioButtonActionPerformed(evt);
         }
      });

      hsiWindowjSpinner.setEnabled(false);
      hsiWindowjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            hsiWindowjSpinnerStateChanged(evt);
         }
      });

      ratioRadioButton.setSelected(true);
      ratioRadioButton.setText("Ratio   (scale Factor)");
      ratioRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ratioRadioButtonActionPerformed(evt);
         }
      });

      percentTurnoverRadioButton.setText("Percent Turnover");
      percentTurnoverRadioButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
      percentTurnoverRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            percentTurnoverRadioButtonActionPerformed(evt);
         }
      });

      jLabel7.setText("Num");

      rartioMaxjSpinner.setToolTipText("Max Ratio in HSI");
      rartioMaxjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rartioMaxjSpinnerStateChanged(evt);
         }
      });

      jLabel3.setText("Ratio Range:");

      denThresholdjSpinner.setToolTipText("Min Denominator value");
      denThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            denThresholdjSpinnerStateChanged(evt);
         }
      });

      imagejLabel.setText("Image: ");

      jLabel6.setText("Threshold:");

      jLabel4.setText("Max");

      jLabel5.setText("Min");

      ratioSFjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            ratioSFjSpinnerStateChanged(evt);
         }
      });

      ratioMinjSpinner.setToolTipText("Min Ratio in HSI");
      ratioMinjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            ratioMinjSpinnerStateChanged(evt);
         }
      });

      jLabel8.setText("Den");

      numThresholdjSpinner.setToolTipText("Min Numerator value");
      numThresholdjSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            numThresholdjSpinnerStateChanged(evt);
         }
      });

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(percentTurnoverRadioButton)
                     .addComponent(ratioRadioButton))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(ratioSFjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                  .addComponent(imagejLabel)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel6)
                     .addComponent(jLabel3))
                  .addGap(18, 18, 18)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel4)
                     .addComponent(jLabel7))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(numThresholdjSpinner)
                     .addComponent(rartioMaxjSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel8))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(denThresholdjSpinner)
                     .addComponent(ratioMinjSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))))
            .addContainerGap())
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addGap(20, 20, 20)
                  .addComponent(imagejLabel))
               .addGroup(jPanel3Layout.createSequentialGroup()
                  .addComponent(percentTurnoverRadioButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(ratioRadioButton)
                     .addComponent(ratioSFjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel6)
                  .addComponent(jLabel7)
                  .addComponent(numThresholdjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel8)
                  .addComponent(denThresholdjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel3)
                     .addComponent(jLabel4)
                     .addComponent(rartioMaxjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel5)
                     .addComponent(ratioMinjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(26, 26, 26)))
            .addContainerGap())
      );

      rgbMaxjLabel.setText("RGB Max: 255");
      rgbMaxjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMaxjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      transparencyjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Max Num,Den", "Numerator", "Denominator", "Min Num,Den", "Mean Num,Den", "Sum Num,Den", "RMS Num,Den" }));
      transparencyjComboBox.setToolTipText("Intensity component of HSI");
      transparencyjComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            transparencyjComboBoxActionPerformed(evt);
         }
      });

      jLabel12.setText("Transparency");

      rgbMinjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMinjSlider.setMajorTickSpacing(50);
      rgbMinjSlider.setMaximum(255);
      rgbMinjSlider.setPaintLabels(true);
      rgbMinjSlider.setPaintTicks(true);
      rgbMinjSlider.setValue(0);
      rgbMinjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMinjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMinjSliderStateChanged(evt);
         }
      });

      jLabel13.setText("Label");

      rgbMinjLabel.setText("RGB Min: 0");
      rgbMinjLabel.setMaximumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setMinimumSize(new java.awt.Dimension(100, 16));
      rgbMinjLabel.setPreferredSize(new java.awt.Dimension(100, 16));

      scalebarjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Off", "Scale", "Scale+Labels" }));
      scalebarjComboBox.setToolTipText("Show Scale and Labels");
      scalebarjComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            scalebarjComboBoxActionPerformed(evt);
         }
      });

      rgbMaxjSlider.setFont(new java.awt.Font("Dialog", 0, 10));
      rgbMaxjSlider.setMajorTickSpacing(50);
      rgbMaxjSlider.setMaximum(255);
      rgbMaxjSlider.setPaintLabels(true);
      rgbMaxjSlider.setPaintTicks(true);
      rgbMaxjSlider.setValue(255);
      rgbMaxjSlider.setMaximumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.setMinimumSize(new java.awt.Dimension(200, 16));
      rgbMaxjSlider.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rgbMaxjSliderStateChanged(evt);
         }
      });

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(rgbMaxjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(rgbMinjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(jPanel2Layout.createSequentialGroup()
                     .addComponent(jLabel12)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(transparencyjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(jLabel13)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(scalebarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(rgbMaxjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(rgbMinjLabel, 0, 0, Short.MAX_VALUE))
                  .addGap(304, 304, 304)))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(rgbMaxjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(23, 23, 23)
                  .addComponent(rgbMinjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(rgbMaxjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(rgbMinjSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(11, 11, 11)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel12)
               .addComponent(transparencyjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel13)
               .addComponent(scalebarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(removeRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(addRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(displayRatiojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(displayHSIjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(hsiWindowRadioButton)
                  .addGap(18, 18, 18)
                  .addComponent(hsiWindowjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(hsiSumRadioButton)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(medianFilterjButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(medianRadiusjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
         .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
         .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(hsiSumRadioButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(hsiWindowjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(hsiWindowRadioButton))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(medianFilterjButton)
                     .addComponent(medianRadiusjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(displayRatiojButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(displayHSIjButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(addRatiojButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(removeRatiojButton)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(38, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(22, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom(){
        medianRadiusjSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.5d), null, Double.valueOf(0.5d)));
        hsiWindowjSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        ratioSFjSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 99999.0d, 1.0d));
        ratioSFjSpinner.setValue((double)ui.getPreferences().getscaleFactor());
        rartioMaxjSpinner.setModel(new SpinnerNumberModel(1.0, -65535, 65535.0, 1));
        ratioMinjSpinner.setModel(new SpinnerNumberModel(1.0, -65535, 65535.0, 1));
        numThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        denThresholdjSpinner.setModel(new SpinnerNumberModel(3, 0, 65535, 1));
        jList1.setModel(listModel);
        jList1.setCellRenderer(new MyCellRenderer(this.ui));
        ratioRadioButton.setSelected(ui.getIsRatio());

        // Remove components (jspinners) from the area
        // in which a user can drag and drop a file.
        Component[] comps = {numThresholdjSpinner, denThresholdjSpinner, rartioMaxjSpinner,
                             ratioMinjSpinner, ratioSFjSpinner, medianRadiusjSpinner,
                             hsiWindowjSpinner};
        for (Component comp : comps) {
           ui.removeComponentFromMimsDrop(comp);
        }
    }

    private void rartioMaxjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rartioMaxjSpinnerStateChanged

        if (bUpdating)
           return;

        if (currentImage == null)
           return;
        
        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           currentImage.getHSIProps().setMaxRatio(new Double(rartioMaxjSpinner.getValue().toString()));
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           currentImage.setDisplayRange(new Double(ratioMinjSpinner.getValue().toString()), new Double(rartioMaxjSpinner.getValue().toString()));
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_rartioMaxjSpinnerStateChanged

    private void ratioMinjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ratioMinjSpinnerStateChanged

        if (bUpdating)
           return;

        if (currentImage == null)
           return;
        
        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           currentImage.getHSIProps().setMinRatio(new Double(ratioMinjSpinner.getValue().toString()));
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           currentImage.setDisplayRange(new Double(ratioMinjSpinner.getValue().toString()), new Double(rartioMaxjSpinner.getValue().toString()));
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_ratioMinjSpinnerStateChanged

    private void numThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numThresholdjSpinnerStateChanged

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE){           
           currentImage.getHSIProps().setNumThreshold(new Integer(numThresholdjSpinner.getValue().toString()));
           currentImage.computeHSI();
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           int numThreshold = ((Integer)numThresholdjSpinner.getValue()).intValue();
           currentImage.getRatioProps().setNumThreshold(numThreshold);
           currentImage.computeRatio();
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_numThresholdjSpinnerStateChanged

    private void denThresholdjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_denThresholdjSpinnerStateChanged

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE) {
           currentImage.getHSIProps().setDenThreshold(new Integer(denThresholdjSpinner.getValue().toString()));
           currentImage.computeHSI();
           update();
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           int denThreshold = ((Integer)denThresholdjSpinner.getValue()).intValue();
           currentImage.getRatioProps().setDenThreshold(denThreshold);
           currentImage.computeRatio();
           currentImage.updateAndDraw();
        }
    }//GEN-LAST:event_denThresholdjSpinnerStateChanged

    private void transparencyjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyjComboBoxActionPerformed
       if (bUpdating || (currentImage.getMimsType() != MimsPlus.HSI_IMAGE))
            return;

        currentImage.getHSIProps().setTransparency(transparencyjComboBox.getSelectedIndex());
        update();
    }//GEN-LAST:event_transparencyjComboBoxActionPerformed

    private void scalebarjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scalebarjComboBoxActionPerformed

       // currentImage is only set when an HSI is generated/selected
       if (bUpdating || currentImage == null)
          return;

       if (currentImage.getMimsType() != MimsPlus.HSI_IMAGE)
          return;

       // Adjust HSIProps.
       currentImage.getHSIProps().setLabelMethod(scalebarjComboBox.getSelectedIndex());

       // Regenerate Image.
       currentImage.setupHSIImage(currentImage.getHSIProps());
    }//GEN-LAST:event_scalebarjComboBoxActionPerformed

    private void rgbMaxjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMaxjSliderStateChanged

        if (bUpdating)
           return;

        if (currentImage == null)
           return;

        if (currentImage.getMimsType()!=MimsPlus.HSI_IMAGE)
           return;

        int val = rgbMaxjSlider.getValue();

        currentImage.getHSIProps().setMaxRGB(val);
        rgbMaxjLabel.setText("RGB Max: " + val);

        //change min slider limits in response
        int range = (rgbMinjSlider.getMaximum() - rgbMinjSlider.getMinimum());
        int spacing = java.lang.Math.round(range/5)+1;
        rgbMinjSlider.setMaximum(val-1);
        rgbMinjSlider.setMajorTickSpacing(spacing);
        rgbMinjSlider.setLabelTable(rgbMinjSlider.createStandardLabels(spacing));
        rgbMinjSlider.repaint();
        //needs to be called to update image
        update();
    }//GEN-LAST:event_rgbMaxjSliderStateChanged

    private void rgbMinjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rgbMinjSliderStateChanged
    if (bUpdating || (currentImage.getMimsType() != MimsPlus.HSI_IMAGE))
        return;

    final int val = rgbMinjSlider.getValue();

    currentImage.getHSIProps().setMinRGB(val);
    rgbMinjLabel.setText("RGB Min: " + val);

    //change max slider limits in response
    int range = (rgbMaxjSlider.getMaximum() - rgbMaxjSlider.getMinimum());
    int spacing = java.lang.Math.round(range / 5) + 1;
    rgbMaxjSlider.setMinimum(val + 1);
    rgbMaxjSlider.setMajorTickSpacing(spacing);
    rgbMaxjSlider.setLabelTable(rgbMaxjSlider.createStandardLabels(spacing));
    rgbMaxjSlider.repaint();
    //needs to be called to update image
    update();
    }//GEN-LAST:event_rgbMinjSliderStateChanged

    private void ratioSFjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ratioSFjSpinnerStateChanged
       if (bUpdating)
          return;
          
       MimsPlus mp = currentImage;
       if (mp == null)
          return;

       if (mp.getMimsType() == MimsPlus.HSI_IMAGE) {
          mp.getHSIProcessor().getHSIProps().setRatioScaleFactor((Double) ratioSFjSpinner.getValue());
          mp.computeHSI();
       } else if (mp.getMimsType() == MimsPlus.RATIO_IMAGE) {
          mp.getRatioProps().setRatioScaleFactor((Double) ratioSFjSpinner.getValue());
          mp.computeRatio();
          mp.updateAndDraw();
       }
    }//GEN-LAST:event_ratioSFjSpinnerStateChanged

    private void percentTurnoverRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentTurnoverRadioButtonActionPerformed

       if (ui.getIsPercentTurnover()) {
          percentTurnoverRadioButton.setSelected(true);
          return;
       }

       // Take care of button group and labels.
       percentTurnoverRadioButton.setSelected(true);
       ratioRadioButton.setSelected(false);
       ratioSFjSpinner.setEnabled(false);
       jLabel3.setText("% Turnover:");
       ui.setIsPercentTurnover(percentTurnoverRadioButton.isSelected());
       ui.setIsRatio(false);

       if (currentImage == null)
          return;

       // Recompute all hsi images.
       MimsPlus[] mps = ui.getOpenHSIImages();
       for (int i = 0; i < mps.length; i++) {
          float maxRatioVal = (float)mps[i].getHSIProps().getMaxRatio();
          float minRatioVal = (float)mps[i].getHSIProps().getMinRatio();
          float sf = (float)mps[i].getHSIProps().getRatioScaleFactor();
          float reference = ui.getPreferences().getReferenceRatio();
          float background = ui.getPreferences().getBackgroundRatio();
          float maxPercentVal = HSIProcessor.turnoverTransform(maxRatioVal, reference, background, sf);
          float minPercentVal = HSIProcessor.turnoverTransform(minRatioVal, reference, background, sf);
          HSIProps hsiprops = mps[i].getHSIProps();
          hsiprops.setMaxRatio(maxPercentVal);
          hsiprops.setMinRatio(minPercentVal);
          mps[i].getHSIProcessor().setProps(hsiprops);
          mps[i].computeHSI();
       }
       setProps(currentImage.getHSIProps());
}//GEN-LAST:event_percentTurnoverRadioButtonActionPerformed

    private void ratioRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioRadioButtonActionPerformed

       if (ui.getIsRatio()) {
          ratioRadioButton.setSelected(true);
          return;
       }
          
       // Take care of button group and labels.
       percentTurnoverRadioButton.setSelected(false);
       ratioRadioButton.setSelected(true);
       ratioSFjSpinner.setEnabled(true);
       jLabel3.setText("Ratio Range:");
       ui.setIsPercentTurnover(percentTurnoverRadioButton.isSelected());
       ui.setIsRatio(true);

       if (currentImage == null)
          return;

       // Recompute all hsi images.
       MimsPlus[] mps = ui.getOpenHSIImages();
       for (int i = 0; i < mps.length; i++) {
          float maxPercentVal = (float)mps[i].getHSIProps().getMaxRatio();
          float minPercentVal = (float)mps[i].getHSIProps().getMinRatio();
          float sf = (float)mps[i].getHSIProps().getRatioScaleFactor();
          float reference = ui.getPreferences().getReferenceRatio();
          float background = ui.getPreferences().getBackgroundRatio();
          float maxRatioVal = HSIProcessor.ratioTransform(maxPercentVal, reference, background, sf);
          float minRatioVal = HSIProcessor.ratioTransform(minPercentVal, reference, background, sf);
          HSIProps hsiprops = mps[i].getHSIProps();
          hsiprops.setMaxRatio(maxRatioVal);
          hsiprops.setMinRatio(minRatioVal);
          mps[i].getHSIProcessor().setProps(hsiprops);
          mps[i].computeHSI();
       }

       setProps(currentImage.getHSIProps());
    }//GEN-LAST:event_ratioRadioButtonActionPerformed

    private void hsiWindowjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hsiWindowjSpinnerStateChanged
       if(this.bUpdating) return;

       // Update window range in UI.
       ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));

       // Recompute all ratio images.
       ui.recomputeAllRatio();

       // Recompute all hsi images.
       ui.recomputeAllHSI();
}//GEN-LAST:event_hsiWindowjSpinnerStateChanged

    private void hsiWindowRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiWindowRadioButtonActionPerformed
       if(this.bUpdating) return;

       // Update GUI.
       if (hsiWindowRadioButton.isSelected()) hsiWindowjSpinner.setEnabled(true);
       else hsiWindowjSpinner.setEnabled(false);
       hsiSumRadioButton.setSelected(false);

       // Set isWindow in ui.
       ui.setIsWindow(hsiWindowRadioButton.isSelected());
       ui.setWindowRange(new Integer(hsiWindowjSpinner.getValue().toString()));
       ui.setIsSum(false);

       // Recompute all ratio images.
       ui.recomputeAllRatio();

       // Recompute all hsi images.
       ui.recomputeAllHSI();
}//GEN-LAST:event_hsiWindowRadioButtonActionPerformed

    private void hsiSumRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hsiSumRadioButtonActionPerformed
       if(this.bUpdating) return;

       // Update GUI
       hsiWindowRadioButton.setSelected(false);
       hsiWindowjSpinner.setEnabled(false);

       // Set isSum in ui.
       ui.setIsSum(hsiSumRadioButton.isSelected());
       ui.setIsWindow(false);

       // Recompute all ratio images.
       ui.recomputeAllRatio();
       ui.autoContrastImages(ui.getOpenRatioImages());

       // Recompute all hsi images.
       ui.recomputeAllHSI();
}//GEN-LAST:event_hsiSumRadioButtonActionPerformed

    private void removeRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRatiojButtonActionPerformed
       int index[] = jList1.getSelectedIndices();
       int num, den;
       double numd, dend;
       for (int i = index.length-1; i >= 0; i--){          
          String[] num_den = ((String)listModel.getElementAt(index[i])).split(":");
          listModel.removeElementAt(index[i]);
          if (num_den.length != 2)
             return;
          try {
             num = Integer.parseInt(num_den[0]);
             den = Integer.parseInt(num_den[1]);
          } catch(NumberFormatException nfe) {
             continue;
          }
          numd = ui.getMassValue(num);
          dend = ui.getMassValue(den);
          ui.getPreferences().removeRatioImage(numd, dend);
          ui.getPreferences().savePreferences();
       }
}//GEN-LAST:event_removeRatiojButtonActionPerformed

    private void addRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRatiojButtonActionPerformed
       MimsRatioManager ratioManager = MimsRatioManager.getInstance();
       if (ratioManager == null) {
          ratioManager = new MimsRatioManager(this, ui);
       }
       ratioManager.showFrame();
}//GEN-LAST:event_addRatiojButtonActionPerformed

    private void displayRatiojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRatiojButtonActionPerformed
       if (bUpdating)
          return;

       // Get the selected ratio images. Each element
       // should have the form 2:1 or 4:3 etc.
       Object[] idx = jList1.getSelectedValues();
       MimsPlus mp;

       // Generate images
       for (int i = 0; i < idx.length; i++) {
          String label = (String) idx[i];
          int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
          int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();
          if (numerator >= ui.getOpenMassImages().length) {
             IJ.error("Error", "Sorry, numerator connot be 1.");
             continue;
          }

          int ri = ui.getRatioImageIndex(numerator, denomator);
          if (ri > -1) {
             MimsPlus[] mps = ui.getOpenRatioImages();
             mp = mps[ri];
             mp.getWindow().toFront();
          } else {
             RatioProps ratioProps = new RatioProps(numerator, denomator);
             ratioProps.setRatioScaleFactor(ui.getPreferences().getscaleFactor());
             mp = new MimsPlus(ui, ratioProps);
             mp.showWindow();
          }
       }
}//GEN-LAST:event_displayRatiojButtonActionPerformed

    private void medianRadiusjSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_medianRadiusjSpinnerStateChanged
       if (this.bUpdating) return;
       if (!medianFilterjButton.isSelected()) return;

       // Get radius value.
       double r = new Double(medianRadiusjSpinner.getValue().toString());

       // Set local props object and ui field.
       ui.setMedianFilterRadius(r);

       // Recompute all ratio images.
       ui.recomputeAllRatio();

       // Recompute all hsi images.
       ui.recomputeAllHSI();
}//GEN-LAST:event_medianRadiusjSpinnerStateChanged

    private void medianFilterjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterjButtonActionPerformed
       if (this.bUpdating) return;

       // Get button and spinner values.
       boolean med = medianFilterjButton.isSelected();
       double r = new Double(medianRadiusjSpinner.getValue().toString());

       // Set values in ui.
       ui.setMedianFilterRatios(med);
       ui.setMedianFilterRadius(r);

       // Recompute all ratio images.
       ui.recomputeAllRatio();

       // Recompute all hsi images.
       ui.recomputeAllHSI();
}//GEN-LAST:event_medianFilterjButtonActionPerformed

    private void displayHSIjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHSIjButtonActionPerformed
       if (bUpdating)
          return;

       // Get the selected ratio images. Each element
       // should have the form 2:1 or 4:3 etc.
       Object[] idx = jList1.getSelectedValues();
       MimsPlus mp;

       // Generate images
       for (int i = 0; i < idx.length; i++) {
          String label = (String) idx[i];
          int numerator = new Integer(label.substring(0, label.indexOf(":"))).intValue();
          int denomator = new Integer(label.substring(label.indexOf(":") + 1, label.length())).intValue();

          if (numerator >= ui.getOpenMassImages().length ||
                  denomator >= ui.getOpenMassImages().length) {
             IJ.error("Error", "Numerator and denominator must both be mass images.");
             return;
          }

          int ri = ui.getHsiImageIndex(numerator, denomator);
          if (ri > -1) {
             MimsPlus[] mps = ui.getOpenHSIImages();
             mp = mps[ri];
             mp.getWindow().toFront();
          } else {
             HSIProps hsiProps = new HSIProps(numerator, denomator);
             hsiProps.setRatioScaleFactor(ui.getPreferences().getscaleFactor());
             hsiProps.setRatioScaleFactor((Double)ratioSFjSpinner.getValue());
             mp = new MimsPlus(ui, hsiProps);
             mp.showWindow();
          }
       }
}//GEN-LAST:event_displayHSIjButtonActionPerformed

    /**
     * Gets the radius value to be used for the median filter.
     * @return the radius value.
     */
   public double getMedianRadius() {
      return new Double(this.medianRadiusjSpinner.getValue().toString());
   }

   /**
    * Gets the ratio scale factor to be used when generating ratio images.
    * @return the scale factor.
    */
   public float getRatioScaleFactor() {
      Double d = (Double) ratioSFjSpinner.getValue();
      return d.floatValue();
   }

   /**
    * Sets the ratio scale factor spinner.
    * @return the scale factor.
    */
   public void setRatioScaleFactor(Double d) {
      bUpdating = true ;
      ratioSFjSpinner.setValue(d);
      bUpdating = false ;
   }

   /**
    * To be called whenever a change is made that requires
    * updating to the HSI image. For example: a change
    * in the rgb slider, threshold, etc.
    */
   public synchronized void update() {

      if (currentImage.getMimsType() != MimsPlus.HSI_IMAGE) {
         return;
      }

      // Adjust processor
      currentImage.getHSIProcessor().setProps(currentImage.getHSIProps());
   }

   /**
    * Updates the list of possible ratio
    * and HSI images in the JList.
    */
    public void updateImage() {
        if(ui == null)
            return;

        com.nrims.data.Opener image = ui.getOpener() ;
        if(image == null)
            return;

        bUpdating = true ;

        // Clear the list.
        listModel.removeAllElements();

        // Get all the mass names.
        String [] massNames = image.getMassNames();

        // Maximum difference between atomic weight
        // to appear by defualt on the ratio list.
        double maxDiff = ui.getPreferences().getRatioSpan();
        boolean reciprocals = ui.getPreferences().getRatioReciprocals();

        // Populate the list with default ratio images.
        for(int i=massNames.length-1; i >= 1; i--) {
           Double d1 = new Double(massNames[i]);
           for(int j=i-1; j >= 0; j--) {
              Double d2 = new Double(massNames[j]);
              if (Math.abs(d2-d1) <= maxDiff) {
                 listModel.addElement(i+":"+j);
                 if(reciprocals) {
                     listModel.addElement(j+":"+i);
                 }
              }
           }
        }

       // Populate the list with user added ratio images.
       maxDiff = ui.getPreferences().getMassDiff();
       String[] numValues = ui.getPreferences().getNumerators();
       String[] denValues = ui.getPreferences().getDenominators();

       if (numValues.length != denValues.length) {
          numValues = new String[0];
          denValues = new String[0];
       }

       double prefNumVal, prefDenVal;
       for (int j = 0; j < numValues.length; j++) {

          try {
             prefNumVal = new Double(numValues[j]);
             prefDenVal = new Double(denValues[j]);
          } catch(NumberFormatException nfe) {
             continue;
          }
          int[] numIndices = ui.getMassIndices(prefNumVal, maxDiff);
          int[] denIndices = ui.getMassIndices(prefDenVal, maxDiff);

          for (int k = 0; k < numIndices.length; k++) {
             for (int l = 0; l < denIndices.length; l++) {
                double numMass = ui.getMassValue(numIndices[k]);
                double denMass = ui.getMassValue(denIndices[l]);
                if (numIndices[k] == denIndices[l])
                   continue;
                String listElement = numIndices[k] + ":" + denIndices[l];
                if (numMass != denMass && ((prefNumVal > prefDenVal) && (numMass > denMass)) && !listModel.contains(listElement))
                   listModel.addElement(listElement);
             }
          }
       }

        // Clear selection by default
        jList1.clearSelection();

        bUpdating = false;
    }

    /** Add an element to the list of avaiable ratio and HSI images. */
    private void addToRatioList(int a, int b){
       listModel.addElement(a+":"+b);
    }

    /**
     * Sets all the relevant sliders and spinner to reflect the values
     * contained in the <code>props</code> object.
     *
     * @param props the props object.
     */
    public void setProps(HSIProps props) {
        bUpdating = true ;

         percentTurnoverRadioButton.setEnabled(true);
         if (ui.getIsPercentTurnover())
            percentTurnoverRadioButton.setSelected(true);
         else
            percentTurnoverRadioButton.setSelected(false);

         if (ui.getIsRatio())
            ratioRadioButton.setSelected(true);
         else
            ratioRadioButton.setSelected(false);
         
         rartioMaxjSpinner.setValue(props.getMaxRatio());
         ratioMinjSpinner.setValue(props.getMinRatio());
         numThresholdjSpinner.setValue(props.getNumThreshold());
         denThresholdjSpinner.setValue(props.getDenThreshold());
         rgbMaxjSlider.setValue(props.getMaxRGB());
         rgbMinjSlider.setValue(props.getMinRGB());
         transparencyjComboBox.setSelectedIndex(props.getTransparency());
         scalebarjComboBox.setSelectedIndex(props.getLabelMethod());
         ratioSFjSpinner.setValue(props.getRatioScaleFactor());

        bUpdating = false ;
    }

    /**
     * Sets all the relevant spinners to reflect the values
     * contained in the <code>props</code> object.
     *
     * @param props the props object.
     */
    public void setProps(RatioProps props) {
        bUpdating = true ;

        percentTurnoverRadioButton.setSelected(false);
        percentTurnoverRadioButton.setEnabled(false);
        ratioRadioButton.setSelected(true);
        ratioSFjSpinner.setEnabled(true);
        jLabel3.setText("Ratio Range:");
        numThresholdjSpinner.setValue(props.getNumThreshold());
        denThresholdjSpinner.setValue(props.getDenThreshold());
        ratioSFjSpinner.setValue(props.getRatioScaleFactor());
        rartioMaxjSpinner.setValue((int)currentImage.getDisplayRangeMax());
        ratioMinjSpinner.setValue((int)currentImage.getDisplayRangeMin());

        bUpdating = false ;
    }

    /**
     * Sets the current image, which in turn, sets which
     * parameters that can and can not be adjusted. This method should
     * probably be expanded to include a call to <code>setProps</code>.
     * 
     * @param mp the image.
     */
    public void setCurrentImage(MimsPlus mp) {
        this.currentImage = mp;
        if (currentImage.getMimsType() == MimsPlus.HSI_IMAGE){
           rgbMaxjSlider.setEnabled(true);
           rgbMinjSlider.setEnabled(true);
           transparencyjComboBox.setEnabled(true);
           scalebarjComboBox.setEnabled(true);
           numThresholdjSpinner.setEnabled(true);
           denThresholdjSpinner.setEnabled(true);
        } else if (currentImage.getMimsType() == MimsPlus.RATIO_IMAGE) {
           rgbMaxjSlider.setEnabled(false);
           rgbMinjSlider.setEnabled(false);
           transparencyjComboBox.setEnabled(false);
           scalebarjComboBox.setEnabled(false);
           numThresholdjSpinner.setEnabled(true);
           denThresholdjSpinner.setEnabled(true);
        } else {
           rgbMaxjSlider.setEnabled(false);
           rgbMinjSlider.setEnabled(false);
           transparencyjComboBox.setEnabled(false);
           scalebarjComboBox.setEnabled(false);
           numThresholdjSpinner.setEnabled(false);
           denThresholdjSpinner.setEnabled(false);
        }
        imagejLabel.setText("Image: " + mp.title);
    }

    /**
     * Returns <code>true</code> if the "median filter ratio" radio button is selected.
     * @return <code>true</code> if the "median filter ratio" radio button is selected, otherwise <code>false</code>.
     */
    public boolean isMedianFilterSelected() {
        return medianFilterjButton.isSelected();
    }

    /**
     * Returns <code>true</code> if the "Use Sum" radio button is selected.
     * @return <code>true</code> if the "Use Sum" radio button is selected, otherwise <code>false</code>.
     */
    public boolean isUseSumSelected() {
        return hsiSumRadioButton.isSelected();
    }

    /**
     * Sets the "Use Sum" radio button to <code>bool</code>.
     */
    public void setIsSum(boolean bool){
        bUpdating = true ;
        hsiSumRadioButton.setSelected(bool);
        bUpdating = false;
    }

    /**
     * Sets the "Use Window" radio button to <code>bool</code>.
     */
    public void setIsWindow(boolean bool) {
        bUpdating = true ;
        hsiWindowRadioButton.setSelected(bool);
        bUpdating = false;
    }

    /**
     * Sets the window range jspinner.
     * @param r the value.
     */
    public void setWindowRange(int r) {
        bUpdating = true ;
        hsiWindowjSpinner.getModel().setValue(r);
        bUpdating = false;
    }

    /**
     * Sets the "Median Filter Ratio" radio button.
     * @param bool <code>true</code> or <code>false</code>.
     */
    public void setIsMedianFiltered(boolean bool) {
        bUpdating = true ;
        medianFilterjButton.setSelected(bool);
        bUpdating = false;
    }

    /**
     * Sets the radius for "Median Filter Ratio".
     * @param r the radius.
     */
    public void setMedianFilterRadius(double r) {
        bUpdating = true ;
        medianRadiusjSpinner.getModel().setValue(r);
        bUpdating = false;
    }


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addRatiojButton;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.JSpinner denThresholdjSpinner;
   private javax.swing.JButton displayHSIjButton;
   private javax.swing.JButton displayRatiojButton;
   private javax.swing.JRadioButton hsiSumRadioButton;
   private javax.swing.JRadioButton hsiWindowRadioButton;
   private javax.swing.JSpinner hsiWindowjSpinner;
   private javax.swing.JLabel imagejLabel;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JList jList1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JRadioButton medianFilterjButton;
   private javax.swing.JSpinner medianRadiusjSpinner;
   private javax.swing.JSpinner numThresholdjSpinner;
   private javax.swing.JRadioButton percentTurnoverRadioButton;
   private javax.swing.JSpinner rartioMaxjSpinner;
   private javax.swing.JSpinner ratioMinjSpinner;
   private javax.swing.JRadioButton ratioRadioButton;
   private javax.swing.JSpinner ratioSFjSpinner;
   private javax.swing.JButton removeRatiojButton;
   private javax.swing.JLabel rgbMaxjLabel;
   private javax.swing.JSlider rgbMaxjSlider;
   private javax.swing.JLabel rgbMinjLabel;
   private javax.swing.JSlider rgbMinjSlider;
   private javax.swing.JComboBox scalebarjComboBox;
   private javax.swing.JComboBox transparencyjComboBox;
   // End of variables declaration//GEN-END:variables

   /**
    * A custom renderer class that controls the way
    * the list displays potential ratio (and HSI) images.
    */
  class MyCellRenderer extends JLabel implements ListCellRenderer {
     UI ui;
     public MyCellRenderer(UI ui) {
        this.ui = ui;
        setOpaque(true);
     }
     public Component getListCellRendererComponent(JList list, Object value, int index,
                                                    boolean isSelected, boolean cellHasFocus) {

        // value should be in the form 2:1 or 1:0
        String[] num_den = ((String)value).split(":");
        int num = new Integer(num_den[0]).intValue();
        int den = new Integer(num_den[1]).intValue();

        // convert to the form 'Mass 13.01 / Mass 12.99'
        String[] massNames = ui.getOpener().getMassNames();
        
        String numLabel, denLabel;
        if (num == massNames.length)
           numLabel = "1";
        else
           numLabel = " Mass "+massNames[num];
        if (den == massNames.length)
           denLabel = "1";
        else
           denLabel = "Mass "+massNames[den]+" ";

        String label = numLabel+" / "+denLabel;

        // set text
        setText(label);

        // set color
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        return this;
     }
   }

  /**
   * Generate a small popup window that allows the user to
   * add any possible ratio image to the list that may
   * not already be there by default.
   */
  static class MimsRatioManager extends PlugInJFrame implements ActionListener {

   static Frame instance;
   MimsHSIView hsiview;
   UI ui;

   ButtonGroup numeratorGroup;
   ButtonGroup denomatorGroup;


   public MimsRatioManager(MimsHSIView hsiview, UI ui){
      super("Ratio Manager");
      this.ui = ui;
      this.hsiview = hsiview;
      if (instance != null) {
            instance.toFront();
            return;
      }
      instance = this;

      // Get the mass names.
      String[] massNames = ui.getOpener().getMassNames();

      // Create the numerator and denominator panel.
      JPanel numeratorPanel = new JPanel(new GridLayout(0,1));
      JPanel denomatorPanel = new JPanel(new GridLayout(0,1));
      numeratorPanel.add(new JLabel("  numerator: "));
      denomatorPanel.add(new JLabel("denominator: "));
      numeratorPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 25, 5));
      denomatorPanel.setBorder(BorderFactory.createEmptyBorder(10, 5, 25, 10));

      // Create the button panel
      JPanel buttonPanel = new JPanel();
      JButton add = new JButton("Add");
      add.addActionListener(this);
      JButton cancel = new JButton("Close");
      cancel.addActionListener(this);
      buttonPanel.add(add);
      buttonPanel.add(cancel);

      // Create the button group.
      numeratorGroup = new ButtonGroup();
      denomatorGroup = new ButtonGroup();

      // Loop over masses and create buttons
      for (int i = 0; i < massNames.length; i++){

         // Must create two instances of the button.
         JRadioButton jrb_num = new JRadioButton("m"+massNames[i]);
         jrb_num.setName((new Integer(i)).toString());
         JRadioButton jrb_den = new JRadioButton("m"+massNames[i]);
         jrb_den.setName((new Integer(i)).toString());

         // Add radiobutton to the group.
         numeratorGroup.add(jrb_num);
         denomatorGroup.add(jrb_den);

         // Add radiobutton to the panel.
         numeratorPanel.add(jrb_num);
         denomatorPanel.add(jrb_den);
      }

      // Add "1" to both numerator and denominator options.
      JRadioButton jrb_num = new JRadioButton("1");
      JRadioButton jrb_den = new JRadioButton("1");
      jrb_num.setName((new Integer(massNames.length)).toString());
      jrb_den.setName((new Integer(massNames.length)).toString());
      numeratorGroup.add(jrb_num);
      denomatorGroup.add(jrb_den);
      numeratorPanel.add(jrb_num);
      denomatorPanel.add(jrb_den);

      // Add panels to the frame
      setLayout(new FlowLayout());
      add(numeratorPanel);
      add(new JSeparator(JSeparator.VERTICAL));
      add(denomatorPanel);
      add(new JSeparator(JSeparator.HORIZONTAL));
      add(buttonPanel);

      setSize(new Dimension(275, 325));
   }

   public void actionPerformed(ActionEvent e) {
      JRadioButton num = null;
      JRadioButton den = null;

      if (e.getActionCommand() == "Add") {

         // Determine the selected radio button in the numerator group.
         for (Enumeration enu=numeratorGroup.getElements(); enu.hasMoreElements();) {
            JRadioButton b = (JRadioButton)enu.nextElement();
            if (b.getModel() == numeratorGroup.getSelection())
               num = b;
         }

         // Determine the selected radio button in the denominator group.
         for (Enumeration enu=denomatorGroup.getElements(); enu.hasMoreElements();) {
            JRadioButton b = (JRadioButton)enu.nextElement();
            if (b.getModel() == denomatorGroup.getSelection())
               den = b;
         }

         if (num == null || den == null) {
            JOptionPane.showMessageDialog(ui, "Must select both numerator and denominator", "Error", JOptionPane.ERROR_MESSAGE);
         } else {
            // example names: m12.99, m13.01
            String numName = num.getName();
            String denName = den.getName();

            // Numberator and Denominator can not be the same.
            if (numName.matches(denName))
               JOptionPane.showMessageDialog(ui, "Numerator can not be the same as Denominator", "Error", JOptionPane.ERROR_MESSAGE);
            else {
               Integer numIdx = new Integer(num.getName());
               Integer denIdx = new Integer(den.getName());
               hsiview.addToRatioList(numIdx, denIdx);
               ui.getPreferences().addRatioImage(ui.getMassValue(numIdx), ui.getMassValue(denIdx));
               ui.getPreferences().savePreferences();
            }
         }

      } else if (e.getActionCommand() == "Close") {
         closeWindow();
      }
   }

   public void closeWindow() {
      super.close();
      instance = null;
      this.setVisible(false);
   }


    // Returns a reference to the MimsRatioManager
    // or null if it is not open.
    public static MimsRatioManager getInstance() {
        return (MimsRatioManager) instance;
    }

    // Show the frame.
    public void showFrame() {
        setLocation(400, 400);
        setVisible(true);
        toFront();
        setExtendedState(NORMAL);
    }
}

}
