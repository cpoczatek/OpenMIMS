/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nrims.managers;

import com.nrims.CompositeProps;
import com.nrims.HSIProps;
import com.nrims.MassProps;
import com.nrims.RatioProps;
import com.nrims.SumProps;
import com.nrims.UI;
import ij.gui.Roi;
import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import javax.swing.DefaultComboBoxModel;

import javax.swing.WindowConstants;

/**
 *
 * @author djsia
 */
public class FilesManager extends javax.swing.JFrame {

    static final public int FILE_SETTINGS = 0;
    static final public int LAST_FILE_SETTINGS = 1;
    static final public int DEFAULT_SETTINGS = 2;
    
    static javax.swing.JFrame instance;
    private DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
    private UI ui;
    private String chosenFile  = "";
    private int chosenSettings;
    
    // Dj; 08/20/2014
    /**
     * Creates new form FilesManager
     */
    public FilesManager(UI ui) {
        initComponents();
        this.ui = ui;
        files_jComboBox.setModel(comboBoxModel);
        chosenSettings = FILE_SETTINGS;
        rb0.setActionCommand("0");
        rb1.setActionCommand("1");
        rb2.setActionCommand("2");
        
        rb0.setSelected(true);
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        instance = this;
    }
    
    //Dj: 08/20/2014
    /**
     * Gets an instance of the FileManager Frame
     * @return an instance of this FileManager Frame. 
     */
    public static FilesManager getInstance() {
        return (FilesManager) instance;
    }
    
    //DJ: 08/20/2014
    /**
     * closes the FileManger Frame by disposing it.
     */
    public void closeWindow() {
        super.dispose();
    }
    
    // DJ: 08/01/2014
    /** 
     * Shows the FileManager Frame by setting the visibility to <code>true</code>
     */ 
    public void showWindow() {
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonsGroup = new javax.swing.ButtonGroup();
        info_Label = new javax.swing.JLabel();
        filesList_jLabel = new javax.swing.JLabel();
        rb2 = new javax.swing.JRadioButton();
        rb0 = new javax.swing.JRadioButton();
        rb1 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        reload_button = new javax.swing.JButton();
        cancel_button = new javax.swing.JButton();
        files_jComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Files Manager");

        info_Label.setForeground(new java.awt.Color(248, 19, 26));
        info_Label.setText("STATUS: LOADING FILE PROCESS STOPPED.");

        filesList_jLabel.setText("LIST OF FILES PREVIOUSLY OPENED (Latest file first) : ");

        radioButtonsGroup.add(rb2);
        rb2.setText("Default Settings (open as new)");

        radioButtonsGroup.add(rb0);
        rb0.setText("File Settings");

        radioButtonsGroup.add(rb1);
        rb1.setText("Last File Settings");

        jLabel3.setText("Re-Load with : ");

        reload_button.setText("RELOAD");
        reload_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_buttonActionPerformed(evt);
            }
        });

        cancel_button.setText("CANCEL");
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        files_jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reload_button)
                .addGap(26, 26, 26)
                .addComponent(cancel_button)
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(files_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filesList_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(info_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb0)
                            .addComponent(rb2)
                            .addComponent(rb1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jLabel3)))
                .addContainerGap(290, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(info_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filesList_jLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(files_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reload_button)
                            .addComponent(cancel_button))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(rb0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rb1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rb2)
                        .addGap(31, 31, 31))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

           
    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        restoreLastOpenedFile();
        this.closeWindow();
       
    }//GEN-LAST:event_cancel_buttonActionPerformed

    private void reload_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reload_buttonActionPerformed

        chosenFile = comboBoxModel.getSelectedItem().toString();
        chosenSettings = Integer.parseInt(radioButtonsGroup.getSelection().getActionCommand());

        try {
            //------------------------------------------------------ 
            if (chosenSettings == FilesManager.FILE_SETTINGS) {
                reOpenWithFileSettings(chosenFile);
            }//------------------------------------------------------ 
            else if (chosenSettings == FilesManager.LAST_FILE_SETTINGS) {
                reOpenWithLastFileSettings(chosenFile);
            }//------------------------------------------------------
            else if (chosenSettings == FilesManager.DEFAULT_SETTINGS) {
                reOpenWithDefaultSettings(chosenFile);
            }
            
        } finally {
            setCursor(null);
        }
        
        this.dispose();
    }//GEN-LAST:event_reload_buttonActionPerformed

    public void addImageFiles(String[] imageFilesNames) {
        if (imageFilesNames == null) {
            return;
        }
        // loop in inverse in order to show the latest file opened first.
        for (int i = imageFilesNames.length - 1; i >= 0; i--) {
            File file = new File(imageFilesNames[i]);
            if (file.exists()) // test just in case the file gets deleted manually by user.
            {
                comboBoxModel.addElement(imageFilesNames[i]);
            }
        }

    }
    
    // DJ: 08/21/2014
    /**
     * ReOpens the last non-canceled file 
     * with its settings, derived images, and ROIs
     * @param chosenFile 
     */
    private void restoreLastOpenedFile(){
        
        File previousFileToLoad = new File(ui.getNameOfLastFileOpened());
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        com.nrims.UI.FileOpenTask fileOpenTask;
        fileOpenTask = ui.new FileOpenTask(previousFileToLoad, ui);

        Vector allProps = ui.getFileSettings(ui.getNameOfLastFileOpened());
        
        //------------------------------------
        MassProps[] massP = (MassProps[]) (allProps.get(0));
        RatioProps[] ratioP = (RatioProps[]) (allProps.get(1));
        HSIProps[] hsiP = (HSIProps[]) (allProps.get(2));
        SumProps[] sumP = (SumProps[]) (allProps.get(3));
        CompositeProps[] compP = (CompositeProps[]) (allProps.get(4));
        
        //-------------------------------------
        if((Boolean)(allProps.get(5)) == true){
            com.nrims.managers.CompositeManager cm = new com.nrims.managers.CompositeManager(ui);
            cm.setVisible(true);
        }
        //------------------------------------
        ArrayList roiProps = (ArrayList)(allProps.get(6));

        boolean isROIManagerVisible = (Boolean) (roiProps.get(0));
        Roi[] roiList = (Roi[]) (roiProps.get(1));
        HashMap<String, ArrayList<Integer[]>> locations = (HashMap<String, ArrayList<Integer[]>>) (roiProps.get(2));
        ArrayList<String> groups = (ArrayList<String>) (roiProps.get(3));
        HashMap<String, String> groupsMap = (HashMap<String, String>) (roiProps.get(4));

        //------------------------------------
        boolean opened = fileOpenTask.doInBackground(
                massP, ratioP, hsiP, sumP, compP, false, false);
        
        //------------------------------------
        ui.getRoiManager().dispose();
        ui.getRoiManager();
       
        ui.getRoiManager().setLocations(locations);
        ui.getRoiManager().setGroups(groups);
        ui.getRoiManager().setGroupMap(groupsMap);

        ui.getRoiManager().setVisible(isROIManagerVisible);
        

    }
    
    // DJ: 08/21/2014
    /**
     * ReOpens the file with the default settings
     * No derived images and no ROIs
     * (CLEAN COPY)
     * @param chosenFile 
     */
    private void reOpenWithDefaultSettings(String chosenFile) {

        File previousFileToLoad = new File(chosenFile);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        com.nrims.UI.FileOpenTask fileOpenTask;
        fileOpenTask = ui.new FileOpenTask(previousFileToLoad, ui);

        boolean opened = fileOpenTask.doInBackground(null, null, null, null, null, false, false);
        ui.getRoiManager().delete(false);

    }
    
    // DJ: 08/21/2014
    /**
     * ReOpens the file with the last settings, derived images, and ROIs
     * of this specific file before it was closed.
     * @param chosenFile 
     */
    private void reOpenWithFileSettings(String chosenFile) {

        File previousFileToLoad = new File(chosenFile);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        com.nrims.UI.FileOpenTask fileOpenTask;
        fileOpenTask = ui.new FileOpenTask(previousFileToLoad, ui);


        Vector allProps = ui.getFileSettings(chosenFile);
       
        //------------------------------------
        MassProps[] massP = (MassProps[]) (allProps.get(0));
        RatioProps[] ratioP = (RatioProps[]) (allProps.get(1));
        HSIProps[] hsiP = (HSIProps[]) (allProps.get(2));
        SumProps[] sumP = (SumProps[]) (allProps.get(3));
        CompositeProps[] compP = (CompositeProps[]) (allProps.get(4));
        
        //------------------------------------
        ArrayList<Object> roiProps = (ArrayList<Object>)(allProps.get(6));

        boolean isROIManagerVisible = (Boolean) (roiProps.get(0));
        Roi[] roiList = (Roi[]) (roiProps.get(1));
        HashMap<String, ArrayList<Integer[]>> locations = (HashMap<String, ArrayList<Integer[]>>) (roiProps.get(2));
        ArrayList<String> groups = (ArrayList<String>) (roiProps.get(3));
        HashMap<String, String> groupsMap = (HashMap<String, String>) (roiProps.get(4));
        //------------------------------------
        boolean opened = fileOpenTask.doInBackground(
                massP, ratioP, hsiP, sumP, compP, false, false);
        
        //-------------------------------------
        if((Boolean)(allProps.get(5)) == true){
            com.nrims.managers.CompositeManager cm = new com.nrims.managers.CompositeManager(ui);
            cm.setVisible(true);
        }
        //------------------------------------
        ui.resetRoiManager();

        for(int i = 0 ; i<roiList.length; i++ ){
            if(groupsMap.keySet().contains(roiList[i].getName()))
                ui.getRoiManager().addToGroupWithoutRenaming(roiList[i], groupsMap.get(roiList[i].getName()));
            else
                ui.getRoiManager().addWithoutRenaming(roiList[i]);
        }
        ui.getRoiManager().setVisible(isROIManagerVisible);
    
    }
    
    // DJ: 08/21/2014
    /**
     * ReOpens the file with the settings, derived images, and ROIs
     * of the last fully opened file.
     * @param chosenFile 
     */
    private void reOpenWithLastFileSettings(String chosenFile) {

        File previousFileToLoad = new File(chosenFile);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        com.nrims.UI.FileOpenTask fileOpenTask;
        fileOpenTask = ui.new FileOpenTask(previousFileToLoad, ui);


        Vector allProps = ui.getFileSettings(ui.getNameOfLastFileOpened());
       
        //------------------------------------
        MassProps[] massP = (MassProps[]) (allProps.get(0));
        RatioProps[] ratioP = (RatioProps[]) (allProps.get(1));
        HSIProps[] hsiP = (HSIProps[]) (allProps.get(2));
        SumProps[] sumP = (SumProps[]) (allProps.get(3));
        CompositeProps[] compP = (CompositeProps[]) (allProps.get(4));
        
        //------------------------------------
        ArrayList<Object> roiProps = (ArrayList<Object>)(allProps.get(6));

        boolean isROIManagerVisible = (Boolean) (roiProps.get(0));
        /*
        Roi[] roiList = (Roi[]) (roiProps.get(1));
        HashMap<String, ArrayList<Integer[]>> locations = (HashMap<String, ArrayList<Integer[]>>) (roiProps.get(2));
        ArrayList<String> groups = (ArrayList<String>) (roiProps.get(3));
        HashMap<String, String> groupsMap = (HashMap<String, String>) (roiProps.get(4));
        */
        //------------------------------------
        boolean opened = fileOpenTask.doInBackground(
                massP, ratioP, hsiP, sumP, compP, false, isROIManagerVisible);
        
        //-------------------------------------
        if((Boolean)(allProps.get(5)) == true){
            com.nrims.managers.CompositeManager cm = new com.nrims.managers.CompositeManager(ui);
            cm.setVisible(true);
        }
        //------------------------------------
        /*
        ui.resetRoiManager();

        for(int i = 0 ; i<roiList.length; i++ ){
            if(groupsMap.keySet().contains(roiList[i].getName()))
                ui.getRoiManager().addToGroupWithoutRenaming(roiList[i], groupsMap.get(roiList[i].getName()));
            else
                ui.getRoiManager().addWithoutRenaming(roiList[i]);
        }
        ui.getRoiManager().setVisible(isROIManagerVisible);
        */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_button;
    private javax.swing.JLabel filesList_jLabel;
    private javax.swing.JComboBox files_jComboBox;
    private javax.swing.JLabel info_Label;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.ButtonGroup radioButtonsGroup;
    private javax.swing.JRadioButton rb0;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JButton reload_button;
    // End of variables declaration//GEN-END:variables
}
